/**
 * Wrap async express http request end return promise or call next on catch
 * @param _target
 * @param _key
 * @param descriptor
 * @example
 * export class RootController {
 *  /@expressErrorHandler
 *   async login(req: Request, res: Response): Promise<void> {
 *     const { username, password } = validationUtil().sanitize(req.body, postLoginBodySchema)
 *     const result = await authorizationUseCase.login({ username, password })
 *     res.json(result)
 *   }
 * }
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const expressErrorHandler = (_target, _key, descriptor) => {
    const originalMethod = descriptor.value;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    descriptor.value = function () {
        const next = arguments[2]; // eslint-disable-line prefer-rest-params
        return Promise.resolve(originalMethod.apply(this, arguments)).catch(next); // eslint-disable-line prefer-rest-params
    };
    return descriptor;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHByZXNzL2Vycm9yLWhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7O0dBY0c7QUFDSCw4REFBOEQ7QUFDOUQsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxPQUFZLEVBQUUsSUFBWSxFQUFFLFVBQXdDLEVBQU8sRUFBRTtJQUNoSCxNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFBO0lBQ3ZDLDhEQUE4RDtJQUM5RCxVQUFVLENBQUMsS0FBSyxHQUFHO1FBQ2xCLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLHlDQUF5QztRQUVuRSxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQyx5Q0FBeUM7SUFDcEgsQ0FBQyxDQUFBO0lBRUQsT0FBTyxVQUFVLENBQUE7QUFDbEIsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBXcmFwIGFzeW5jIGV4cHJlc3MgaHR0cCByZXF1ZXN0IGVuZCByZXR1cm4gcHJvbWlzZSBvciBjYWxsIG5leHQgb24gY2F0Y2hcbiAqIEBwYXJhbSBfdGFyZ2V0XG4gKiBAcGFyYW0gX2tleVxuICogQHBhcmFtIGRlc2NyaXB0b3JcbiAqIEBleGFtcGxlXG4gKiBleHBvcnQgY2xhc3MgUm9vdENvbnRyb2xsZXIge1xuICogIC9AZXhwcmVzc0Vycm9ySGFuZGxlclxuICogICBhc3luYyBsb2dpbihyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpOiBQcm9taXNlPHZvaWQ+IHtcbiAqICAgICBjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCB9ID0gdmFsaWRhdGlvblV0aWwoKS5zYW5pdGl6ZShyZXEuYm9keSwgcG9zdExvZ2luQm9keVNjaGVtYSlcbiAqICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhdXRob3JpemF0aW9uVXNlQ2FzZS5sb2dpbih7IHVzZXJuYW1lLCBwYXNzd29yZCB9KVxuICogICAgIHJlcy5qc29uKHJlc3VsdClcbiAqICAgfVxuICogfVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGNvbnN0IGV4cHJlc3NFcnJvckhhbmRsZXIgPSAoX3RhcmdldDogYW55LCBfa2V5OiBzdHJpbmcsIGRlc2NyaXB0b3I6IFR5cGVkUHJvcGVydHlEZXNjcmlwdG9yPGFueT4pOiBhbnkgPT4ge1xuXHRjb25zdCBvcmlnaW5hbE1ldGhvZCA9IGRlc2NyaXB0b3IudmFsdWVcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcblx0ZGVzY3JpcHRvci52YWx1ZSA9IGZ1bmN0aW9uICgpOiBhbnkge1xuXHRcdGNvbnN0IG5leHQgPSBhcmd1bWVudHNbMl0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcblxuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUob3JpZ2luYWxNZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKSkuY2F0Y2gobmV4dCkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcblx0fVxuXG5cdHJldHVybiBkZXNjcmlwdG9yXG59XG4iXX0=